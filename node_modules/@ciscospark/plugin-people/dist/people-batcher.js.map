{"version":3,"sources":["people-batcher.js"],"names":["PersonUUIDRequestBatcher","extend","namespace","handleHttpSuccess","res","all","body","items","map","personResponse","handleItemSuccess","id","handleItemFailure","email","response","getDeferredForResponse","then","defer","reject","resolve","fingerprintRequest","uuid","spark","people","inferPersonIdFromUuid","fingerprintResponse","prepareRequest","ids","join","submitHttpRequest","request","service","resource"],"mappings":";;;;;;;;;;AAMA;;;;AAIA;;;AAGA,IAAMA,2BAA2B,mBAAQC,MAAR,CAAe;AAC9CC,qBAD8C;;AAG9C;;;;AAIAC,mBAP8C,6BAO5BC,GAP4B,EAOvB;AAAA;;AACrB,WAAO,kBAAQC,GAAR,CAAYD,IAAIE,IAAJ,CAASC,KAAT,CAAeC,GAAf,CAAmB,UAACC,cAAD;AAAA,aACpC,MAAKC,iBAAL,CAAuBD,eAAeE,EAAtC,EAA0CF,cAA1C,CADoC;AAAA,KAAnB,CAAZ,CAAP;AAGD,GAX6C;AAa9CG,mBAb8C,6BAa5BC,KAb4B,EAarBC,QAbqB,EAaX;AACjC,WAAO,KAAKC,sBAAL,CAA4BF,KAA5B,EACJG,IADI,CACC,UAACC,KAAD,EAAW;AACfA,YAAMC,MAAN,CAAaJ,QAAb;AACD,KAHI,CAAP;AAID,GAlB6C;;;AAoB9C;;;;;AAKAJ,mBAzB8C,6BAyB5BG,KAzB4B,EAyBrBC,QAzBqB,EAyBX;AACjC,WAAO,KAAKC,sBAAL,CAA4BF,KAA5B,EACJG,IADI,CACC,UAACC,KAAD,EAAW;AACfA,YAAME,OAAN,CAAcL,QAAd;AACD,KAHI,CAAP;AAID,GA9B6C;;;AAgC9C;;;;AAIAM,oBApC8C,8BAoC3BC,IApC2B,EAoCrB;AACvB,WAAO,kBAAQF,OAAR,CAAgB,KAAKG,KAAL,CAAWC,MAAX,CAAkBC,qBAAlB,CAAwCH,IAAxC,CAAhB,CAAP;AACD,GAtC6C;;;AAwC9C;;;;AAIAI,qBA5C8C,+BA4C1BJ,IA5C0B,EA4CpB;AACxB,WAAO,kBAAQF,OAAR,CAAgBE,IAAhB,CAAP;AACD,GA9C6C;AAgD9CK,gBAhD8C,0BAgD/BC,GAhD+B,EAgD1B;AAClB,WAAO,kBAAQR,OAAR,CAAgBQ,IAAIC,IAAJ,EAAhB,CAAP;AACD,GAlD6C;;;AAoD9C;;;;AAIAC,mBAxD8C,6BAwD5BF,GAxD4B,EAwDvB;AACrB,WAAO,KAAKL,KAAL,CAAWQ,OAAX,CAAmB;AACxBC,sBADwB;AAExBC,gCAAwBL;AAFA,KAAnB,CAAP;AAID;AA7D6C,CAAf,CAAjC,C,CAbA;;;;;;kBA6Ee3B,wB","file":"people-batcher.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {\n  Batcher\n} from '@ciscospark/spark-core';\n\n/**\n * @class\n */\nconst PersonUUIDRequestBatcher = Batcher.extend({\n  namespace: `People`,\n\n  /**\n   * @param {HttpResponseObject} res\n   * @returns {Promise}\n   */\n  handleHttpSuccess(res) {\n    return Promise.all(res.body.items.map((personResponse) =>\n      this.handleItemSuccess(personResponse.id, personResponse)\n    ));\n  },\n\n  handleItemFailure(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.reject(response);\n      });\n  },\n\n  /**\n   * @param {string} email\n   * @param {Object} response\n   * @returns {Promise}\n   */\n  handleItemSuccess(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.resolve(response);\n      });\n  },\n\n  /**\n   * @param {string} uuid\n   * @returns {Promise<string>}\n   */\n  fingerprintRequest(uuid) {\n    return Promise.resolve(this.spark.people.inferPersonIdFromUuid(uuid));\n  },\n\n  /**\n   * @param {string} uuid\n   * @returns {Promise<string>}\n   */\n  fingerprintResponse(uuid) {\n    return Promise.resolve(uuid);\n  },\n\n  prepareRequest(ids) {\n    return Promise.resolve(ids.join());\n  },\n\n  /**\n   * @param {Object} ids\n   * @returns {Promise<HttpResponseObject>}\n   */\n  submitHttpRequest(ids) {\n    return this.spark.request({\n      service: `hydra`,\n      resource: `people/?id=${ids}`\n    });\n  }\n});\n\nexport default PersonUUIDRequestBatcher;\n"]}